<template>
    <div class="{{$style.default['pay-buy']}}">
        <div class="{{$style.default['price-list']}}">
            <button
                s-for="product, index in products"
                class="{{$style.default['price-item']}}"
                style="{{activeProductIndex === index ? 'background:#08b3e1;': ''}}"
                on-click="setactiveProductIndex(index)"
            >{{product.name}} {{(product.price / 100).toFixed(2)}}￥</button>
        </div>
        <div class="{{$style.default['pay-type']}}">
            <div
                s-for="payType, index in payTypeList"
                on-click="setActivePayTypeIndex(index)"
                class="{{$style.default['pay-type-item']}}"
                style="{{activePayTypeIndex === index ? 'background:#08b3e1;': ''}}"
            >
                <span>{{payType}}</span>
            </div>
        </div>
        <div s-if="{{currentQrCodeStatus === qrCodeStatusType.show}}" s-ref="qrCodeDom" class="{{$style.default['pay-code']}}">
            <div class="{{$style.default['pay-code-header']}}">
                <div>请扫码支付</div>
                <button on-click="hiddenQrCode">关闭</button>
            </div>
        </div>
        <div s-else-if="{{currentQrCodeStatus === qrCodeStatusType.loading}}" class="{{$style.default['pay-code-loading']}}">正在获取支付二维码...</div>
        <button class="{{$style.default['pay-btn']}}" on-click="createOrder">获取支付二维码</button>
    </div>
</template>

<script>
import {Component} from 'san';
import {axios, getReqUrl} from '../../../../server';
import QRCode from 'qrcode2';
import {qrCodeStatusType, MAX_CHECK_COUNT, CHECK_INTERVAL, TRADE_STATE} from '../../../../type';

export default class Buy extends Component {
    initData() {
        return {
            activeProductIndex: -1,
            payTypeList: ['微信', '支付宝'],
            activePayTypeIndex: -1,
            products: [],
            qrCodeStatusType,
            currentQrCodeStatus: qrCodeStatusType.close,
            code_url: ''
        }
    }

    created() {
        this.getProducts();
        this.watch('currentQrCodeStatus', status => {
            if (status === qrCodeStatusType.show) {
                this.nextTick(() => {
                    this.showQrCode();
                });
            }
        })
    }

    setactiveProductIndex(index) {
        this.data.set('activeProductIndex', index);
    }

    setActivePayTypeIndex(index) {
        this.data.set('activePayTypeIndex', index);
    }

    getProducts() {
        axios.get(getReqUrl().getProducts)
        .then(({data:{products}}) => {
            this.data.set('products', products);
        })
        .catch(err => {
            console.log(err);
        });
    }

    showQrCode() {
        this.qrCode = new QRCode(this.ref('qrCodeDom'), {
            text: this.data.get('code_url'),
            width: 128,
            height: 128,
            colorDark : "#000000",
            colorLight : "#ffffff",
            correctLevel : QRCode.CorrectLevel.H
        });
    }

    hiddenQrCode() {
        this.qrCode = null;
        this.data.set('currentQrCodeStatus', qrCodeStatusType.close);
    }

    createOrder() {
        const {activePayTypeIndex, activeProductIndex, products, payTypeList} = this.data.get();
        if (activePayTypeIndex < 0 || activeProductIndex < 0) {
            alert('请先选择商品和支付方式再支付');
            return;
        }
        this.data.set('currentQrCodeStatus', qrCodeStatusType.loading);
        axios.get(getReqUrl().createOrder, {
            params: {
                productId: products[activeProductIndex].id
            }
        })
        .then(res => {
            const {code_url, orderId} = res.data;
            this.data.set('code_url', code_url);
            this.data.set('currentQrCodeStatus', qrCodeStatusType.show);
            this.checkOrderState({orderId});
        })
        .catch(err => {
            console.log(err);
        });
    }

    checkOrderState({orderId}) {
        let timer = null;
        let checkCount = 0;
        timer = setInterval(() => {
            if (++checkCount > MAX_CHECK_COUNT) {
                alert('订单已过期，请获取新的支付二维码');
                clearInterval(timer);
                return;
            }
            axios.get(getReqUrl().checkOrderState, {
                params: {
                    orderId,
                    isLastCheck: checkCount === MAX_CHECK_COUNT
                }
            })
            .then(res => {
                console.log(res);
                const {trade_state} = res.data;
                if (trade_state === TRADE_STATE.SUCCESS) {
                    alert('支付成功');
                    clearInterval(timer);
                }
            })
            .catch(err => {
                console.log(err);
            });
        }, CHECK_INTERVAL);
    }
};
</script>

<style lang="less" module>
    .pay-buy {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        width: 100%;
        height: 100%;
        .price-list {
            display: flex;
            justify-content: space-around;
            align-items: center;
            width: 100%;
            margin-top: 10px;
            .price-item {
                height: 30px;
                border-radius: 5px;
                border: none;
                cursor: pointer;
            }
        }
        .pay-type {
            display: flex;
            justify-content: space-around;
            align-items: center;
            width: 100%;
            color: white;
            margin-top: 20px;
            .pay-type-item {
                width: 40%;
                height: 100px;
                background: #a4c0db;
                border-radius: 5px;
                display: flex;
                justify-content: center;
                align-items: center;
                cursor: pointer;
            }
        }
        .pay-code {
            width: 70%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            height: 160px;
            margin-top: 20px;
            .pay-code-header {
                width: 55%;
                display: flex;
                flex-wrap: nowrap;
                align-items: center;
                justify-content: space-between;
            }
        }
        .pay-code-loading {
            margin-top: 50px;
        }
        .pay-btn {
            cursor: pointer;
            margin-top: 50px;
            border-radius: 5px;
            border: none;

            &:hover {
                background: #108ad3;
                color: white;
            }
        }
    }
</style>>